generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PATIENT
  DOCTOR
  HOSPITAL
}

enum TokenType {
  VERIFICATION
  RESET_PASSWORD
}

enum MedicineSource {
  PATIENT
  DOCTOR
}

enum AppointmentType {
  ONLINE
  OFFLINE
}

enum AppointmentStatus {
  PENDING
  COMPLETED
  CANCELLED_BY_PATIENT
  CANCELLED_BY_DOCTOR
}

enum SlotStatus {
  AVAILABLE
  BOOKED
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  password     String
  role         Role
  phone        String   @unique
  address      String?
  profileImage String?
  isVerified   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tokens   Token[]
  patient  Patient?
  doctor   Doctor?
  hospital Hospital?

  @@map("users")
}

model Token {
  id        Int       @id @default(autoincrement())
  userId    Int
  token     String    @unique
  type      TokenType
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, type])
  @@map("tokens")
}

model Hospital {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user         User          @relation(fields: [userId], references: [id])
  doctors      Doctor[]
  services     Service[]

  @@map("hospitals")
}

model Service {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hospitals Hospital[]

  @@map("services")
}

model Patient {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  gender    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user              User                @relation(fields: [userId], references: [id])
  medicalRecords    MedicalRecord[]
  medications       Medication[]
  prescriptions     Prescription[]
  appointments      Appointment[]
  emergencyContacts EmergencyContacts[]

  @@map("patients")
}

model EmergencyContacts {
  id        Int      @id @default(autoincrement())
  patientId Int
  name      String
  phone     String
  relation  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient Patient @relation(fields: [patientId], references: [id])

  @@index([patientId])
  @@map("emergency_contacts")
}

model Doctor {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  gender     String
  hospitalId Int
  rating     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user             User              @relation(fields: [userId], references: [id])
  hospital         Hospital          @relation(fields: [hospitalId], references: [id])
  medicalRecords   MedicalRecord[]
  prescriptions    Prescription[]
  specialties      Speciality[]
  appointments     Appointment[]
  appointmentSlots AppointmentSlot[]

  @@map("doctors")
}

model Speciality {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  doctors Doctor[]

  @@map("specialties")
}

model MedicalRecord {
  id          Int      @id @default(autoincrement())
  patientId   Int
  doctorId    Int?
  name        String
  description String?
  recordDate  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  patient Patient               @relation(fields: [patientId], references: [id])
  doctor  Doctor?               @relation(fields: [doctorId], references: [id])
  files   MedicalRecordFile[]
  details MedicalRecordDetail[]

  @@unique([patientId, recordDate, name])
  @@index([patientId])
  @@index([doctorId])
  @@map("medical_records")
}

model MedicalRecordFile {
  id              Int      @id @default(autoincrement())
  name            String
  url             String
  medicalRecordId Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  medicalRecord MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)

  @@map("medical_record_files")
}

model MedicalRecordDetail {
  id                     Int      @id @default(autoincrement())
  medicalRecordId        Int
  result                 Float
  examinationReferenceId Int
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  medicalRecord MedicalRecord      @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  examination   MedicalExamination @relation(fields: [examinationReferenceId], references: [id], onDelete: Restrict)

  @@unique([medicalRecordId, examinationReferenceId])
  @@map("medical_record_details")
}

model MedicalExamination {
  id               Int      @id @default(autoincrement())
  name             String
  unit             String?
  gender           String?
  normalRangeStart Float?
  normalRangeEnd   Float?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  details MedicalRecordDetail[]

  @@map("medical_examinations")
}

model Prescription {
  id            Int      @id @default(autoincrement())
  patientId     Int
  doctorId      Int // doctor id --> get from user id
  appointmentId Int?     @unique
  date          DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  patient     Patient      @relation(fields: [patientId], references: [id])
  doctor      Doctor       @relation(fields: [doctorId], references: [id])
  appointment Appointment? @relation(fields: [appointmentId], references: [id])
  medicines   Medication[] // add patient id from prescription to medicine using loop
  notes       String?

  @@map("prescriptions")
}

model Medication {
  id             Int      @id @default(autoincrement())
  patientId      Int
  prescriptionId Int?
  name           String
  dosage         String
  frequency      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  patient      Patient          @relation(fields: [patientId], references: [id])
  prescription Prescription?    @relation(fields: [prescriptionId], references: [id])
  timesToTake  MedicationTime[]
  source       MedicineSource

  @@map("medications")
}

model MedicationTime {
  id           Int      @id @default(autoincrement())
  time         String
  medicationId Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  medication Medication @relation(fields: [medicationId], references: [id])

  @@unique([time, medicationId])
  @@map("medication_times")
}

model Appointment {
  id             Int               @id @default(autoincrement())
  patientId      Int
  doctorId       Int
  date           String
  type           AppointmentType
  location       String?
  prescriptionId Int?
  videoLink      String?
  status         AppointmentStatus
  notes          String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  patient           Patient          @relation(fields: [patientId], references: [id])
  doctor            Doctor           @relation(fields: [doctorId], references: [id])
  prescription      Prescription?
  appointmentSlot   AppointmentSlot? @relation(fields: [appointmentSlotId], references: [id])
  appointmentSlotId Int?             @unique

  @@index([patientId])
  @@index([doctorId])
  @@map("appointments")
}

model AppointmentSlot {
  id        Int             @id @default(autoincrement())
  doctorId  Int
  date      String
  startTime String
  endTime   String
  status    SlotStatus
  type      AppointmentType
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  doctor      Doctor       @relation(fields: [doctorId], references: [id])
  appointment Appointment?

  @@index([doctorId])
  @@index([date, startTime, endTime])
  @@map("appointment_slots")
}

// reminder
// payment
// admin
// ai chat (mongo)
// know your food (mongo)
